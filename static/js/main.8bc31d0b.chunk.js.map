{"version":3,"sources":["SearchBar.js","Image.js","SingleBook.js","SearchResults.js","HomeMessage.js","BookFinder.js","About.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","text","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","handleSearch","className","onSubmit","this","Input","size","action","icon","placeholder","onChange","style","width","Component","Image","loading","dimensions","failed","checkDimensions","img","offsetHeight","height","offsetWidth","imgUrl","imgPath","book","Loader","active","inline","role","onLoad","onError","alert","src","alt","SingleBook","expanded","handleClick","List","Item","key","bookId","Content","Header","Button","onClick","type","data-toggle","data-target","aria-expanded","aria-controls","content","id","SearchResults","numOfBooksShowing","showMore","prev","createBookComponents","data","slice","map","item","index","books","hasResults","length","iconNames","badgeClass","Segment","Icon","name","numFound","searchText","celled","HomeMessage","as","textAlign","circular","BookFinder","query","split","join","fetch","then","response","json","About","href","rel","aria-label","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bc31d0b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input } from \"semantic-ui-react\";\n\nclass SearchBar extends Component {\n  state = {\n    text: \"\"\n  };\n\n  handleChange = e => {\n    const text = e.target.value;\n    this.setState({ text });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.handleSearch(this.state.text);\n  };\n\n  render() {\n    return (\n      <div className=\"col-md-6 mt-2 mx-auto\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group row\">\n            <Input\n              size=\"huge\"\n              action={{ icon: \"search\" }}\n              placeholder=\"Enter the book info.\"\n              onChange={this.handleChange}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport { Loader } from \"semantic-ui-react\";\n\nclass Image extends Component {\n  state = {\n    loading: true,\n    dimensions: {},\n    failed: false\n  };\n\n  checkDimensions = ({ target: img }) => {\n    const failed = img.offsetHeight + img.offsetHeight < 5;\n    this.setState({\n      loading: false,\n      dimensions: {\n        height: img.offsetHeight,\n        width: img.offsetWidth\n      },\n      failed: failed\n    });\n  };\n\n  render() {\n    let imgUrl = \"\";\n    let imgPath = \"\";\n    // Try isbn and oclc codes for cover url\n    if (this.props.book[\"isbn\"]) {\n      let isbn = this.props.book[\"isbn\"][0];\n      imgPath = \"isbn/\" + isbn;\n    } else if (this.props.book[\"oclc\"]) {\n      let oclc = this.props.book[\"oclc\"];\n      imgPath = \"oclc/\" + oclc;\n    } else {\n      imgPath = \"isbn/000000\";\n    }\n\n    imgUrl = `http://covers.openlibrary.org/b/${imgPath}-M.jpg`;\n\n    return (\n      <>\n        {this.state.loading && <Loader active inline />}\n        {this.state.failed ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            Cover not found!\n          </div>\n        ) : (\n          <img\n            onLoad={this.checkDimensions}\n            onError={() => alert(\"Error loading image!\")}\n            src={imgUrl}\n            alt={`Cover of ${this.props.book[\"title_suggest\"]}`}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport Image from \"./Image\";\nimport { List, Button } from \"semantic-ui-react\";\nclass SingleBook extends Component {\n  state = {\n    expanded: false\n  };\n\n  handleClick = () => {\n    this.setState({ expanded: true });\n  };\n\n  render() {\n    return (\n      <List.Item key={`book-${this.props.bookId}`}>\n        <List.Content>\n          <div className=\"row\">\n            <div className=\"col-md-9\">\n              <List.Header>{this.props.book[\"title_suggest\"]}</List.Header>\n              {this.props.book[\"author_name\"]}\n            </div>\n            <div className=\"col-md-3 pl ml-auto\">\n              <Button\n                onClick={this.handleClick}\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target={`#collapse-book-${this.props.bookId}`}\n                aria-expanded=\"false\"\n                aria-controls={`collapse-book-${this.props.bookId}`}\n                content=\"Find cover\"\n                className=\"btn-cover m-auto\"\n              />\n            </div>\n          </div>\n          <div className=\"collapse\" id={`collapse-book-${this.props.bookId}`}>\n            <div className=\"book-cover text-center\">\n              {this.state.expanded && <Image book={this.props.book} />}\n            </div>\n          </div>\n        </List.Content>\n      </List.Item>\n    );\n  }\n}\n\nexport default SingleBook;\n","import React, { Component } from \"react\";\nimport \"./SearchResults.css\";\nimport SingleBook from \"./SingleBook\";\nimport { Header, Icon, Segment, List } from \"semantic-ui-react\";\n\nclass SearchResults extends Component {\n  state = {\n    numOfBooksShowing: 4\n  };\n\n  // Reset number of books showing everytime the results is mounted\n  componentDidMount() {\n    this.setState({ numOfBooksShowing: 4 });\n  }\n\n  // Increment the number of books showing by 4\n  showMore = () => {\n    this.setState(prev => ({ numOfBooksShowing: prev.numOfBooksShowing + 4 }));\n  };\n\n  // Maps the book data to SingleBook components\n  createBookComponents = data => {\n    return (\n      data &&\n      data[\"docs\"]\n        .slice(0, this.state.numOfBooksShowing)\n        .map((item, index) => (\n          <SingleBook key={\"book-\" + index} bookId={index} book={item} />\n        ))\n    );\n  };\n  \n  render() {\n    // Slice out the first element which is data head\n    const books = this.createBookComponents(this.props.data);\n    const hasResults = !!books.length;\n    const iconNames = hasResults ? \"book\" : \"warning circle\";\n    const badgeClass = hasResults ? \"badge-success\" : \"badge-danger\";\n    return (\n      <div className=\"search-results\">\n        <Segment placeholder>\n          <Header icon>\n            <Icon name={iconNames} />\n            Found\n            <span className={`badge badge-pill ${badgeClass} mx-1 my-auto`}>\n              {this.props.data.numFound}\n            </span>\n            results for \"<em>{this.props.searchText}</em>\".\n          </Header>\n          <List celled size=\"big\">\n            {books}\n          </List>\n          {this.props.data &&\n            this.props.data.numFound > this.state.numOfBooksShowing && (\n              <button className=\"btn btn-warning mt-3\" onClick={this.showMore}>\n                Show more\n              </button>\n            )}\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from \"react\";\nimport { Header, Icon } from \"semantic-ui-react\";\n\nconst HomeMessage = () => {\n  return (\n    <>\n      <Header as=\"h1\" icon textAlign=\"center\">\n        <Icon name=\"book\" circular />\n        <Header.Content>Welcome to BookFinder!</Header.Content>\n      </Header>\n      <p>\n        Enter keywords for your book (title, author, isbn, or else), then click\n        the button.\n      </p>\n    </>\n  );\n};\n\nexport default HomeMessage;\n","import React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResults from \"./SearchResults\";\n// eslint-disable-next-line\nimport mockData from \"./mockData\";\nimport HomeMessage from \"./HomeMessage\";\nimport { Loader } from \"semantic-ui-react\";\n\nclass BookFinder extends Component {\n  state = {\n    data: \"\",\n    loading: false,\n    searchText: \"\"\n  };\n\n  handleSearch = text => {\n    // Convert input into query format\n    const searchWords = text.split(\" \");\n    const query = searchWords.join(\"+\");\n    // Reset the previous state, if any\n    this.setState({ data: \"\", loading: true });\n    fetch(`https://openlibrary.org/search.json?q=${query}`)\n      .then(response => response.json())\n      .then(data => this.setState({ loading: false, searchText: text, data }));\n    // Mock API fetch using previously fetched and saved data\n    //  this.setState({ loading: false, data: mockData, searchText: text });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"jumbotron p-3 bg-light\">\n          <SearchBar handleSearch={this.handleSearch} />\n        </div>\n        <div className=\"container\">\n          {/* Show the greeting message if no data is present */}\n          {!this.state.data && !this.state.loading && <HomeMessage />}\n          {/* Show loading spinner while search results are loading */}\n          {this.state.loading && <Loader size=\"massive\" active inline />}\n          {/* List search results if data has been fetched */}\n          {this.state.data && (\n            <SearchResults data={this.state.data} searchText={this.state.searchText} />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default BookFinder;\n","import React from 'react';\nimport { Header, Icon } from \"semantic-ui-react\";\nconst About = () => {\n  return (\n    <div className=\"jumbotron\">\n    <Header as=\"h1\" icon textAlign=\"center\">\n      <Icon name=\"code\" circular />\n      <Header.Content>About BookFinder</Header.Content>\n    </Header>\n\n    <p>As far as I know, there is no single API for finding book covers directly from the book title. So, this app kind of fills that hole.</p>\n    <p>First search and find your book, then find the cover.</p>\n    <p>This is a open source project, you can find the source code at <a href=\"https://github.com/jamcry/react-book-finder\" target=\"_blank\" rel=\"noopener noreferrer\"> the GitHub repository</a>.</p>\n\n    <h2>Data Source</h2>\n    <p>This app uses <a href=\"https://openlibrary.org/developers/api\" target=\"_blank\" rel=\"noopener noreferrer\">OpenLibrary API</a> for retrieving data. You can refer to their website if anything is wrong with the data.</p>\n\n    <h3>Developer</h3>\n    <p>\n      This app is developed by <a href=\"https://cemkiray.com\" target=\"_blank\" rel=\"noopener noreferrer\"><b>JamCry</b></a>. It is created with React.js and Semantic UI for styling.\n    </p>\n  </div>\n  );\n}\n \nexport default About;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport App from \"./App\";\nimport BookFinder from \"./BookFinder\";\nimport About from \"./About\";\n\nexport default function Header() {\n  return (\n    <header>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n        <a className=\"navbar-brand\" href=\"./\">\n          <span role=\"img\" aria-label=\"books\">\n            📚\n          </span>{\" \"}\n          Book Finder\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#headerNavbarToggler\"\n          aria-controls=\"headerNavbarToggler\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"headerNavbarToggler\">\n          <ul className=\"navbar-nav mt-2 mt-lg-0 ml-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"./\" className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                About\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Go Top\n              </a>\n            </li>\n          </ul>\n\n          {/* SEARCH FORM\n            <form className=\"form-inline my-2 my-lg-0 ml-auto\">\n              <input\n                className=\"form-control mr-sm-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n              />\n              <button\n                className=\"btn btn-outline-success my-2 my-sm-0\"\n                type=\"submit\"\n              >\n                Search\n              </button>\n            </form>\n            */}\n        </div>\n      </nav>\n    </header>\n  );\n}\n","import React from \"react\";\nimport BookFinder from \"./BookFinder\";\nimport Header from \"./Header\";\nimport \"./App.css\";\nimport About from \"./About\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Header />\n        <div className=\"mt-5 pt-2\">\n          <Switch>\n            <Route path=\"/\" exact component={BookFinder} />\n            <Route path=\"/about\" component={About} />\n          </Switch>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"semantic-ui-css/semantic.min.css\"\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}